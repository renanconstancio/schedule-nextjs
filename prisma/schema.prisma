// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = "file:./db.sqlite"
  relationMode = "prisma"
}

model Store {
  id            String      @id @default(uuid())
  fantasyName   String
  corporateName String
  cnpj          String
  cpf           String
  description   String
  address       String
  phones        String
  themes        String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  deleted_at    DateTime?
  customers     Customer[]
  promotions    Promotion[]
  categories    Category[]

  @@map("stores")
}

// enum TYPE_PROMOTION {
//   PRICE
//   PORCENTAGE
// }

model Promotion {
  id          String    @id @default(uuid())
  title       String
  description String
  type        String
  price       Decimal
  startDate   DateTime?
  finalDate   DateTime?
  visibility  Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String?

  @@index([storeId])
  @@map("promotions")
}

model Category {
  id          String  @id @default(uuid())
  title       String
  description String
  position    Int     @default(0)
  visibility  Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String?

  @@index([storeId])
  @@map("categories")
}

// enum TYPE_CUSTOMER {
//   ROOT
//   CUSTOMER
//   BARBER
//   USER_BARBER
// }

model Customer {
  id            String    @id @default(uuid())
  fantasyName   String
  corporateName String
  cnpj          String
  cpf           String
  description   String
  address       String
  phones        String
  themes        String
  type          String
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?
  store         Store?    @relation(fields: [storeId], references: [id])
  storeId       String?
  user          User[]

  @@index([storeId])
  @@map("customers")
}

model User {
  id         String    @id @default(uuid())
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@map("users")
}
